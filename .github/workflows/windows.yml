name: Remote SSH via Windows

on:
  workflow_dispatch: # Allows you to run this workflow manually

jobs:
  build:
    runs-on: windows-latest # We're using a standard Windows machine

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup SSH Server and User
        run: |
          # Install OpenSSH Server
          Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0
          Start-Service sshd
          Set-Service -Name sshd -StartupType Automatic

          # Create a new user 'runner' and add to Administrators group
          # IMPORTANT: Change 'YOUR_STRONG_PASSWORD' to a secure password
          if (Get-LocalUser -Name "runner" -ErrorAction SilentlyContinue) {
              Write-Host "User 'runner' already exists. Resetting password to be safe."
              net user runner YOUR_STRONG_PASSWORD
          } else {
              Write-Host "User 'runner' does not exist. Creating now..."
              net user runner YOUR_STRONG_PASSWORD /add
              net localgroup administrators runner /add
          }
        shell: powershell

      - name: Setup ngrok Tunnel ðŸš€
        run: |
          # Download and setup ngrok
          Invoke-WebRequest -Uri "https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-windows-amd64.zip" -OutFile "ngrok.zip"
          Expand-Archive -Path "ngrok.zip" -DestinationPath "."

          # Add your ngrok authtoken from GitHub Secrets
          # IMPORTANT: Store this as a GitHub Secret named NGROK_AUTHTOKEN
          .\ngrok.exe config add-authtoken ${{ secrets.NGROK_AUTHTOKEN }}
          
          # Start ngrok in the background to expose SSH port 22
          Start-Process -FilePath ".\ngrok.exe" -ArgumentList "tcp 22 --log=stderr" -NoNewWindow
          Start-Sleep -Seconds 10 # Give ngrok some time to start

          # Get the public URL from the ngrok API and print it
          $ngrokApiUrl = "http://localhost:4040/api/tunnels"
          $publicUrl = ""
          for ($i = 1; $i -le 5; $i++) {
              try {
                  $response = Invoke-RestMethod -Uri $ngrokApiUrl -ErrorAction Stop
                  $publicUrl = $response.tunnels | Where-Object { $_.proto -eq "tcp" } | Select-Object -ExpandProperty public_url
                  if ($publicUrl) {
                      break
                  }
              } catch {
                  Write-Host "Error fetching ngrok tunnel info: $_"
              }
              Write-Host "Waiting for ngrok tunnel to be ready... (attempt $i)"
              Start-Sleep -Seconds 5
          }

          if (-not $publicUrl) {
              Write-Host "Error: Could not get ngrok public URL after several attempts."
              exit 1
          }

          Write-Host "=========================================================================="
          Write-Host "âœ… ngrok tunnel is live! Connect using the command below."
          Write-Host "To connect from your terminal, use:"
          Write-Host "ssh runner@$($publicUrl.Replace('tcp://', ''))"
          Write-Host "The password is the one you set in the workflow file."
          Write-Host "=========================================================================="
        shell: powershell
          
      - name: Keep Action Alive
        run: |
          Write-Host "Action is running. Press Ctrl+C or cancel the workflow in GitHub to stop it."
          # This keeps the runner alive for 6 hours (GitHub's max time for a job)
          Start-Sleep -Seconds 21600
        shell: powershell